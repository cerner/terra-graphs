(window.webpackJsonp=window.webpackJsonp||[]).push([[197],{1290:function(e,a,t){"use strict";t.r(a)},1465:function(e,a,t){"use strict";var n=t(2);Object.defineProperty(a,"__esModule",{value:!0}),a.default=void 0;var r=n(t(1273)),i=t(1275),p={key:"bar_dataset",label:{display:"Bar Data Label"},graphType:"Bar",color:r.default.helpers.COLORS.GREEN,onClick:i.loadBarPopup,values:[{x:1,y:30},{x:2,y:10},{x:3,y:13},{x:4,y:15},{x:5,y:18}]};a.default=p},1713:function(e,a,t){"use strict";var n=t(2);Object.defineProperty(a,"__esModule",{value:!0}),a.default=void 0;var r=n(t(0)),i=n(t(1273)),p=n(t(1274));t(1276),t(1279),t(1290);var o=n(t(1278)),l=n(t(1346)),m=n(t(1347)),d=n(t(1465)),c=p.default.deepClone((0,l.default)("#barGraphWithLine")),s=[p.default.deepClone(d.default),p.default.deepClone(m.default)],b=function(){return r.default.useEffect((function(){var e=i.default.api.graph(c);e.loadContent(i.default.api.bar(s[0])),e.loadContent(i.default.api.line(s[1]))}),[]),r.default.createElement(o.default,{id:"barGraphWithLine"})};a.default=b},2010:function(e,a,t){"use strict";t.r(a),t.d(a,"default",(function(){return D}));var n=t(31),r=t.n(n),i=t(55),p=t.n(i),o=t(0),l=t.n(o),m=t(788),d=t(1713),c=t.n(d),s=["components"],b={};function u(e){var a=e.components,t=p()(e,s);return Object(m.mdx)("wrapper",r()({},b,t,{components:a,mdxType:"MDXLayout"}),Object(m.mdx)("pre",null,Object(m.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport Carbon from '@cerner/carbon-graphs/lib/js/carbon';\nimport utils from '@cerner/carbon-graphs/lib/js/helpers/utils';\nimport '@cerner/terra-graphs-docs/lib/terra-graphs-src/components/Graph.module.scss';\nimport '@cerner/terra-graphs-docs/lib/terra-graphs-src/components/Line/LineGraph.module.scss';\nimport '@cerner/terra-graphs-docs/lib/terra-graphs-src/components/Bar/BarGraph.module.scss';\nimport ExampleGraphContainer from '@cerner/terra-graphs-docs/lib/terra-dev-site/ExampleGraphContainer/ExampleGraphContainer';\nimport getCombinationGraphConfig from '@cerner/terra-graphs-docs/lib/example-datasets/graphConfigObjects/Combination/combinationDefault';\nimport lineDataset from '@cerner/terra-graphs-docs/lib/example-datasets/dataObjects/Combination/lineDataset1';\nimport barDataset from '@cerner/terra-graphs-docs/lib/example-datasets/dataObjects/Combination/barDataset';\n\n/*\nPlease refer to the documentation below to see the graphConfig and data objects\n*/\nconst graphConfig = utils.deepClone(getCombinationGraphConfig('#barGraphWithLine'));\nconst dataset = [\n  utils.deepClone(barDataset),\n  utils.deepClone(lineDataset),\n];\n\nconst BarGraphWithLineCombinationExample = () => {\n  React.useEffect(() => {\n    const graph = Carbon.api.graph(graphConfig);\n    graph.loadContent(Carbon.api.bar(dataset[0]));\n    graph.loadContent(Carbon.api.line(dataset[1]));\n  }, []);\n  return (\n    <ExampleGraphContainer id=\"barGraphWithLine\" />\n  );\n};\n\nexport default BarGraphWithLineCombinationExample;\n\n")))}u.isMDXComponent=!0;var h=t(1281),x=t.n(h),j=t(1282),g=function(e){var a=e.title,t=e.description,n=e.isExpanded;return l.a.createElement(x.a,{title:a||"Bar Graph With Line",description:t,example:l.a.createElement(c.a,null),exampleCssSrc:l.a.createElement(j.a,null),exampleSrc:l.a.createElement(u,null),isExpanded:n})},O=t(1466),f=["components"],N={},C="wrapper";function w(e){var a=e.components,t=p()(e,f);return Object(m.mdx)(C,r()({},N,t,{components:a,mdxType:"MDXLayout"}),Object(m.mdx)("pre",null,Object(m.mdx)("code",{parentName:"pre",className:"language-js"},"import Carbon from '@cerner/carbon-graphs/lib/js/carbon';\nimport { loadBarPopup } from '@cerner/terra-graphs-docs/lib/example-datasets/popup';\n\nconst data = {\n  key: 'bar_dataset',\n  label: {\n    display: 'Bar Data Label',\n  },\n  graphType: 'Bar',\n  color: Carbon.helpers.COLORS.GREEN,\n  onClick: loadBarPopup,\n  values: [\n    {\n      x: 1,\n      y: 30,\n    },\n    {\n      x: 2,\n      y: 10,\n    },\n    {\n      x: 3,\n      y: 13,\n    },\n    {\n      x: 4,\n      y: 15,\n    },\n    {\n      x: 5,\n      y: 18,\n    },\n  ],\n};\n\nexport default data;\n\n")))}w.isMDXComponent=!0;var y=t(1467),v=["components"];t(1284);var G={},L="wrapper";function D(e){var a=e.components,t=p()(e,v);return Object(m.mdx)(L,r()({},G,t,{components:a,mdxType:"MDXLayout"}),Object(m.mdx)("h1",{id:"combination"},"Combination"),Object(m.mdx)("p",null,"A combination graph is built by combining two different native graphs(line, bar, paired result etc) build using D3 based on standard design patterns."),Object(m.mdx)("ul",null,Object(m.mdx)("li",{parentName:"ul"},Object(m.mdx)("p",{parentName:"li"},"We can draw different combinations of graphs. i.e. We can draw a ",Object(m.mdx)("em",{parentName:"p"},"Combination graph")," with ",Object(m.mdx)("em",{parentName:"p"},"2 Bar graphs")," or ",Object(m.mdx)("em",{parentName:"p"},"1 Bar graph")," and ",Object(m.mdx)("em",{parentName:"p"},"1 line graph")," without ever needing to building those natively in Carbon.")),Object(m.mdx)("li",{parentName:"ul"},Object(m.mdx)("p",{parentName:"li"},"We can draw different combinations of graph in any order necessary.")),Object(m.mdx)("li",{parentName:"ul"},Object(m.mdx)("p",{parentName:"li"},Object(m.mdx)("a",{parentName:"p",href:"#combination"},"Combination")),Object(m.mdx)("ul",{parentName:"li"},Object(m.mdx)("li",{parentName:"ul"},Object(m.mdx)("a",{parentName:"li",href:"#getting-started"},"Getting Started")),Object(m.mdx)("li",{parentName:"ul"},Object(m.mdx)("a",{parentName:"li",href:"#usage"},"Usage")),Object(m.mdx)("li",{parentName:"ul"},Object(m.mdx)("a",{parentName:"li",href:"#configuration-structure"},"Configuration Structure")),Object(m.mdx)("li",{parentName:"ul"},Object(m.mdx)("a",{parentName:"li",href:"#configuration-properties"},"Configuration properties")),Object(m.mdx)("li",{parentName:"ul"},Object(m.mdx)("a",{parentName:"li",href:"#dataset-structure"},"Dataset Structure")),Object(m.mdx)("li",{parentName:"ul"},Object(m.mdx)("a",{parentName:"li",href:"#dataset-properties"},"Dataset Properties"),Object(m.mdx)("ul",{parentName:"li"},Object(m.mdx)("li",{parentName:"ul"},Object(m.mdx)("a",{parentName:"li",href:"#constraints"},"Constraints")))),Object(m.mdx)("li",{parentName:"ul"},Object(m.mdx)("a",{parentName:"li",href:"#example"},"Example"))))),Object(m.mdx)("h2",{id:"getting-started"},"Getting Started"),Object(m.mdx)("ul",null,Object(m.mdx)("li",{parentName:"ul"},"Install with ",Object(m.mdx)("a",{parentName:"li",href:"https://www.npmjs.com/"},"npmjs"),":",Object(m.mdx)("ul",{parentName:"li"},Object(m.mdx)("li",{parentName:"ul"},Object(m.mdx)("inlineCode",{parentName:"li"},"npm i @cerner/carbon-graphs --save-dev"))))),Object(m.mdx)("h2",{id:"usage"},"Usage"),Object(m.mdx)("p",null,"An instance of Combination graph is obtained as follows:"),Object(m.mdx)("pre",null,Object(m.mdx)("code",{parentName:"pre",className:"language-js"},"Carbon.api.line(/* dataset1 */)\nCarbon.api.bar(/* dataset2 */)\n")),Object(m.mdx)("p",null,"A Combination graph can be plotted as follows:"),Object(m.mdx)("pre",null,Object(m.mdx)("code",{parentName:"pre",className:"language-js"},"import Carbon from '@cerner/carbon-graphs/dist/js/carbon-graphs.js';\nimport '@cerner/carbon-graphs/dist/css/carbon-graphs.css';\nconst graph = Carbon.api.graph(/* graph config JSON */);\ngraph.loadContent(Carbon.api.line(/* dataset 1 */));\n\n// Additional graph types can be added:\ngraph.loadContent(Carbon.api.bar(/* dataset 2 */));\ngraph.loadContent(Carbon.api.pairedResult(/* dataset 3 */));\n")),Object(m.mdx)("h2",{id:"configuration-structure"},"Configuration Structure"),Object(m.mdx)("p",null,"You will ",Object(m.mdx)("strong",{parentName:"p"},"not")," need all the properties in the example below.\nCheck ",Object(m.mdx)("a",{parentName:"p",href:"../core-configuration/Documentation/Graph"},"Graph")," for graph configuration properties."),Object(m.mdx)("pre",null,Object(m.mdx)("code",{parentName:"pre",className:"language-js"},"var root = {\n    bindTo: <String>,\n    axis: {\n        x: {\n            type: <string>,\n            label: <string>,\n            lowerLimit: <number> or <Date>,\n            upperLimit: <number> or <Date>,\n        },\n        y: {\n            label: <string>,\n            lowerLimit: <number>,\n            upperLimit: <number>,\n        },\n        y2: {\n            show: <bool>,\n            label: <string>,\n            lowerLimit: <number>,\n            upperLimit: <number>,\n        }\n    },\n    dateline: [\n        {\n            showDatelineIndicator: <bool>,\n            label: {\n                display: <string>\n            },\n            color: <hex value as string>,\n            shape: <shape SVG>,\n            onClick: <function>,\n            value: <date object>\n        }\n    ],\n    clickPassThrough: {\n        datelines: <bool>\n    },\n    showLabel: <bool>,\n    showLegend: <bool>,\n    showShapes: <bool>,\n    showVGrid: <bool>,\n    showHGrid: <bool>,\n};\n")),Object(m.mdx)("h2",{id:"configuration-properties"},"Configuration Properties"),Object(m.mdx)("p",null,"See ",Object(m.mdx)("a",{parentName:"p",href:"../core-configuration/Documentation/Graph"},"Graph")," for graph configuration properties."),Object(m.mdx)("h2",{id:"dataset-structure"},"Dataset Structure"),Object(m.mdx)("ul",null,Object(m.mdx)("li",{parentName:"ul"},Object(m.mdx)("p",{parentName:"li"},"Please refer the  graphs below to see their respective data structure."),Object(m.mdx)("ul",{parentName:"li"},Object(m.mdx)("li",{parentName:"ul"},Object(m.mdx)("a",{parentName:"li",href:"../line-graph/about#dataset-structure"},"Line graph")),Object(m.mdx)("li",{parentName:"ul"},Object(m.mdx)("a",{parentName:"li",href:"../bar-graph/about#dataset-structure"},"Bar graph")),Object(m.mdx)("li",{parentName:"ul"},Object(m.mdx)("a",{parentName:"li",href:"../paired-result-graph/about#dataset-structure"},"Paired result graph")),Object(m.mdx)("li",{parentName:"ul"},Object(m.mdx)("a",{parentName:"li",href:"../bubble-graph/about#dataset-structure"},"Bubble graph")),Object(m.mdx)("li",{parentName:"ul"},Object(m.mdx)("a",{parentName:"li",href:"../scatter-graph/about#dataset-structure"},"Scatter graph"))))),Object(m.mdx)("h2",{id:"dataset-properties"},"Dataset Properties"),Object(m.mdx)("ul",null,Object(m.mdx)("li",{parentName:"ul"},Object(m.mdx)("p",{parentName:"li"},"Please refer the graphs below to see their respective data structure."),Object(m.mdx)("ul",{parentName:"li"},Object(m.mdx)("li",{parentName:"ul"},Object(m.mdx)("a",{parentName:"li",href:"../line-graph/about#dataset-properties"},"Line graph")),Object(m.mdx)("li",{parentName:"ul"},Object(m.mdx)("a",{parentName:"li",href:"../bar-graph/about#dataset-properties"},"Bar graph")),Object(m.mdx)("li",{parentName:"ul"},Object(m.mdx)("a",{parentName:"li",href:"../paired-result-graph/about#dataset-properties"},"Paired result graph")),Object(m.mdx)("li",{parentName:"ul"},Object(m.mdx)("a",{parentName:"li",href:"../bubble-graph/about#dataset-properties"},"Bubble graph")),Object(m.mdx)("li",{parentName:"ul"},Object(m.mdx)("a",{parentName:"li",href:"../scatter-graph/about#dataset-properties"},"Scatter graph")))),Object(m.mdx)("li",{parentName:"ul"},Object(m.mdx)("h3",{parentName:"li",id:"constraints"},"Constraints"),Object(m.mdx)("ul",{parentName:"li"},Object(m.mdx)("li",{parentName:"ul"},"A ",Object(m.mdx)("inlineCode",{parentName:"li"},"Gantt")," chart ",Object(m.mdx)("strong",{parentName:"li"},"cannot")," be combined with a ",Object(m.mdx)("inlineCode",{parentName:"li"},"Line")," graph -> ",Object(m.mdx)("inlineCode",{parentName:"li"},"Line")," needs a X and Y axis whereas ",Object(m.mdx)("inlineCode",{parentName:"li"},"Gantt")," chart Construct only has X Axis when drawn."),Object(m.mdx)("li",{parentName:"ul"},"A ",Object(m.mdx)("inlineCode",{parentName:"li"},"Timeline")," graph ",Object(m.mdx)("strong",{parentName:"li"},"cannot")," be combined with a ",Object(m.mdx)("inlineCode",{parentName:"li"},"Line")," graph -> ",Object(m.mdx)("inlineCode",{parentName:"li"},"Line")," needs a X and Y axis whereas ",Object(m.mdx)("inlineCode",{parentName:"li"},"Timeline")," graph doesn't have a Y Axis."),Object(m.mdx)("li",{parentName:"ul"},"A ",Object(m.mdx)("inlineCode",{parentName:"li"},"Line")," graph ",Object(m.mdx)("strong",{parentName:"li"},"can")," be combined with a ",Object(m.mdx)("inlineCode",{parentName:"li"},"Bar")," or ",Object(m.mdx)("inlineCode",{parentName:"li"},"Paired Result"),".")))),Object(m.mdx)("h2",{id:"example"},"Example"),Object(m.mdx)(g,{mdxType:"CombinationGraph"}),Object(m.mdx)("details",null,Object(m.mdx)("summary",{style:{fontSize:24}},Object(m.mdx)("b",null,"Data")),Object(m.mdx)("h3",{id:"graph-config-object"},"Graph Config object"),Object(m.mdx)(O.a,{mdxType:"GraphConfig"}),Object(m.mdx)("h3",{id:"data-object"},"Data object"),Object(m.mdx)("h4",{id:"bar-dataset"},"Bar Dataset"),Object(m.mdx)(w,{mdxType:"DataObject1"}),Object(m.mdx)("h4",{id:"line-dataset"},"Line Dataset"),Object(m.mdx)(y.a,{mdxType:"DataObject2"})))}D.isMDXComponent=!0}}]);