(window.webpackJsonp=window.webpackJsonp||[]).push([[277],{1832:function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return c}));var n=a(31),i=a.n(n),l=a(55),r=a.n(l),d=(a(0),a(788)),m=["components"],o={},p="wrapper";function c(e){var t=e.components,a=r()(e,m);return Object(d.mdx)(p,i()({},o,a,{components:t,mdxType:"MDXLayout"}),Object(d.mdx)("h1",{id:"ticks"},"Ticks"),Object(d.mdx)("p",null,"Ticks and Grid lines representing Axes values."),Object(d.mdx)("ul",null,Object(d.mdx)("li",{parentName:"ul"},Object(d.mdx)("a",{parentName:"li",href:"#overview"},"Overview")),Object(d.mdx)("li",{parentName:"ul"},Object(d.mdx)("a",{parentName:"li",href:"#properties"},"Properties")),Object(d.mdx)("li",{parentName:"ul"},Object(d.mdx)("a",{parentName:"li",href:"#tick-values"},"Tick Values")),Object(d.mdx)("li",{parentName:"ul"},Object(d.mdx)("a",{parentName:"li",href:"#examples"},"Examples"),Object(d.mdx)("ul",{parentName:"li"},Object(d.mdx)("li",{parentName:"ul"},Object(d.mdx)("a",{parentName:"li",href:"#values"},"Values")),Object(d.mdx)("li",{parentName:"ul"},Object(d.mdx)("a",{parentName:"li",href:"#datetime-buckets"},"Datetime Buckets"))))),Object(d.mdx)("h2",{id:"overview"},"Overview"),Object(d.mdx)("p",null,"Ticks are labels on the Axes to represent axis values. These values are determined by the upper and lower limits of its axis. If any datapoints on the graph exceed the upper or lower limits, the axis range will adjust accordingly and the tick labels will be updated."),Object(d.mdx)("p",null,"If there is only 1 axis in the graph, the tick intervals are calculated automatically using the d3.js ",Object(d.mdx)("inlineCode",{parentName:"p"},"nice")," function. If the Y2 axis is visible, the tick intervals are set based on the range of the Y & Y2 axes. This can be overridden to be custom using the ",Object(d.mdx)("inlineCode",{parentName:"p"},"ticksCount")," property in the graph configuration object. Acceptable values for ",Object(d.mdx)("inlineCode",{parentName:"p"},"ticksCount")," are ",Object(d.mdx)("inlineCode",{parentName:"p"},"0 - 19"),". Invalid values will result in ",Object(d.mdx)("inlineCode",{parentName:"p"},"ticksCount")," being ignored and going back to the default behavior."),Object(d.mdx)("p",null,Object(d.mdx)("strong",{parentName:"p"},"Note:")," If tick values are in between ",Object(d.mdx)("inlineCode",{parentName:"p"},"[-0.5 < x < 0.5 and x != 0] or [-0.05 < x < 0.05 and x != 0]")," and so on till ",Object(d.mdx)("inlineCode",{parentName:"p"},"[-0.00005 < x < 0.00005 and x != 0]")," which may lead to displaying multiple zeros on Y or Y2 axes, we set the formatting to be ",Object(d.mdx)("inlineCode",{parentName:"p"},"-Math.floor(Math.log10(x))")," decimal place.\nIf consumers override the formatting in above situation which leads to multiple Zeros on Y or Y2 axes ticks, we honor that but add to our documentation a warning or fyi on what can happen and possible ways to fix it."),Object(d.mdx)("h2",{id:"properties"},"Properties"),Object(d.mdx)("ul",null,Object(d.mdx)("li",{parentName:"ul"},Object(d.mdx)("strong",{parentName:"li"},"Note")," while the ",Object(d.mdx)("inlineCode",{parentName:"li"},"ticks")," object itself is optional, if it is proved then the required props must also be provided.")),Object(d.mdx)("table",null,Object(d.mdx)("thead",{parentName:"table"},Object(d.mdx)("tr",{parentName:"thead"},Object(d.mdx)("th",{parentName:"tr",align:null},"Property Name"),Object(d.mdx)("th",{parentName:"tr",align:null},"Type"),Object(d.mdx)("th",{parentName:"tr",align:null},"Default"),Object(d.mdx)("th",{parentName:"tr",align:null},"Required"),Object(d.mdx)("th",{parentName:"tr",align:null},"Description"))),Object(d.mdx)("tbody",{parentName:"table"},Object(d.mdx)("tr",{parentName:"tbody"},Object(d.mdx)("td",{parentName:"tr",align:null},"values"),Object(d.mdx)("td",{parentName:"tr",align:null},"array"),Object(d.mdx)("td",{parentName:"tr",align:null},"-"),Object(d.mdx)("td",{parentName:"tr",align:null},"yes*"),Object(d.mdx)("td",{parentName:"tr",align:null},"Ticks values in the axis. Each tick will have an associated grid line.")),Object(d.mdx)("tr",{parentName:"tbody"},Object(d.mdx)("td",{parentName:"tr",align:null},"format"),Object(d.mdx)("td",{parentName:"tr",align:null},"string"),Object(d.mdx)("td",{parentName:"tr",align:null},"-"),Object(d.mdx)("td",{parentName:"tr",align:null},"yes"),Object(d.mdx)("td",{parentName:"tr",align:null},Object(d.mdx)("a",{parentName:"td",href:"https://github.com/d3/d3-time-format/blob/master/README.md#locales"},"Formatter")," for tick values. ",Object(d.mdx)("inlineCode",{parentName:"td"},"Note:")," This is mandatory if values are provided. To suppress tick values's trailing zeros, specify '~' just before the format type. ",Object(d.mdx)("inlineCode",{parentName:"td"},'Eg: format: "~r"'),". Specifying ~ in the format takes precedence over the axis object ",Object(d.mdx)("inlineCode",{parentName:"td"},"suppressTrailingZeros")," prop.")),Object(d.mdx)("tr",{parentName:"tbody"},Object(d.mdx)("td",{parentName:"tr",align:null},"lowerStepTickValues"),Object(d.mdx)("td",{parentName:"tr",align:null},"array"),Object(d.mdx)("td",{parentName:"tr",align:null},Object(d.mdx)("inlineCode",{parentName:"td"},"[]")),Object(d.mdx)("td",{parentName:"tr",align:null},"no*"),Object(d.mdx)("td",{parentName:"tr",align:null},"lower-Tick-Values in the axis. Each tick will have an associated grid line. When lowerTickValues are present, values are disregarded. Lighter when compared to upperTickValues but darker than midpointTickValues.")),Object(d.mdx)("tr",{parentName:"tbody"},Object(d.mdx)("td",{parentName:"tr",align:null},"midpointTickValues"),Object(d.mdx)("td",{parentName:"tr",align:null},"array"),Object(d.mdx)("td",{parentName:"tr",align:null},Object(d.mdx)("inlineCode",{parentName:"td"},"[]")),Object(d.mdx)("td",{parentName:"tr",align:null},"no*"),Object(d.mdx)("td",{parentName:"tr",align:null},"Mid-Tick-Values in the axis. Each tick will have an associated grid line. Lightest gray shade when compared to others. Uses the default coloring of values, if none of the ",Object(d.mdx)("inlineCode",{parentName:"td"},"lowerTickValues"),", ",Object(d.mdx)("inlineCode",{parentName:"td"},"midTickValues")," and ",Object(d.mdx)("inlineCode",{parentName:"td"},"upperTickValues")," are provided.")),Object(d.mdx)("tr",{parentName:"tbody"},Object(d.mdx)("td",{parentName:"tr",align:null},"upperStepTickValues"),Object(d.mdx)("td",{parentName:"tr",align:null},"array"),Object(d.mdx)("td",{parentName:"tr",align:null},Object(d.mdx)("inlineCode",{parentName:"td"},"[]")),Object(d.mdx)("td",{parentName:"tr",align:null},"no*"),Object(d.mdx)("td",{parentName:"tr",align:null},"Upper-Tick-Values in the axis. Each tick will have an associated grid line. Much thicker and darker when compared with lowerTickValues, midTickValues and values axis.")))),Object(d.mdx)("ul",null,Object(d.mdx)("li",{parentName:"ul"},Object(d.mdx)("strong",{parentName:"li"},"*note"),": If ",Object(d.mdx)("inlineCode",{parentName:"li"},"values")," is not provided then at least one of ",Object(d.mdx)("inlineCode",{parentName:"li"},"lowerStepTickValues"),", ",Object(d.mdx)("inlineCode",{parentName:"li"},"midpointTickValues"),", ",Object(d.mdx)("inlineCode",{parentName:"li"},"upperStepTickValues")," needs to be provided instead."),Object(d.mdx)("li",{parentName:"ul"},"When using ",Object(d.mdx)("inlineCode",{parentName:"li"},"values"),"/",Object(d.mdx)("inlineCode",{parentName:"li"},"lowerStepTickValues")," and/or",Object(d.mdx)("inlineCode",{parentName:"li"},"midpointTickValues"),", ",Object(d.mdx)("inlineCode",{parentName:"li"},"upperStepTickValues")," it is the consumers' responsibility to ensure that there is no overlap among these values."),Object(d.mdx)("li",{parentName:"ul"},Object(d.mdx)("inlineCode",{parentName:"li"},"midpointTickValues")," do not have an associated tick label on the X Axis. They are supposed to denote a separation between Lower Step and Upper Step or consecutive Lower Steps/Upper Steps.")),Object(d.mdx)("h2",{id:"tick-values"},"Tick Values"),Object(d.mdx)("p",null,"The tick values are set using one of 3 methods in the following priority:"),Object(d.mdx)("ul",null,Object(d.mdx)("li",{parentName:"ul"},Object(d.mdx)("p",{parentName:"li"},Object(d.mdx)("strong",{parentName:"p"},"Consumer provided values"),":"),Object(d.mdx)("p",{parentName:"li"},"Consumer-provided-values in ",Object(d.mdx)("inlineCode",{parentName:"p"},"axis.y.ticks.values")," and ",Object(d.mdx)("inlineCode",{parentName:"p"},"axis.y2.ticks.values")," will take highest priority if it is set."),Object(d.mdx)("ul",{parentName:"li"},Object(d.mdx)("li",{parentName:"ul"},"When both ",Object(d.mdx)("inlineCode",{parentName:"li"},"lowerStepTickValues")," and ",Object(d.mdx)("inlineCode",{parentName:"li"},"values")," properties are provided, then ",Object(d.mdx)("inlineCode",{parentName:"li"},"values")," is ignored."))),Object(d.mdx)("li",{parentName:"ul"},Object(d.mdx)("p",{parentName:"li"},Object(d.mdx)("strong",{parentName:"p"},"ticksCount property")),Object(d.mdx)("p",{parentName:"li"},"If no values are provided and the ticksCount property is set, then it will be used to calculate tick values by dividing ",Object(d.mdx)("inlineCode",{parentName:"p"},"upperLimit - lowerLimit")," into ",Object(d.mdx)("inlineCode",{parentName:"p"},"ticksCount + 1")," equal divisions."),Object(d.mdx)("p",{parentName:"li"},"If ticksCount is an invalid value, such as greater than ",Object(d.mdx)("inlineCode",{parentName:"p"},"TICKSCOUNT_MAXLIMIT"),", then this property will be ignored and the default behavior will be used."),Object(d.mdx)("p",{parentName:"li"},"If ",Object(d.mdx)("inlineCode",{parentName:"p"},"axis.y.ticks.values")," AND ",Object(d.mdx)("inlineCode",{parentName:"p"},"ticksCount")," are both provided, then ",Object(d.mdx)("inlineCode",{parentName:"p"},"ticksCount")," will be ignored in favor of the custom values.")),Object(d.mdx)("li",{parentName:"ul"},Object(d.mdx)("p",{parentName:"li"},Object(d.mdx)("strong",{parentName:"p"},"Default")),Object(d.mdx)("p",{parentName:"li"}," If neither ",Object(d.mdx)("inlineCode",{parentName:"p"},"ticksCount")," nor custom tick values are provided, then the default behavior is as follows:"),Object(d.mdx)("ul",{parentName:"li"},Object(d.mdx)("li",{parentName:"ul"},Object(d.mdx)("p",{parentName:"li"},"If the Y2 Axis is visible, then Carbon will calculate and use a ticksCount value, based on the ranges of Y and Y2.")),Object(d.mdx)("li",{parentName:"ul"},Object(d.mdx)("p",{parentName:"li"},"Else if there is no Y2 axis and ",Object(d.mdx)("inlineCode",{parentName:"p"},"ticksCount = undefined"),", Carbon will use D3.js to automatically find the tick values."))))),Object(d.mdx)("h2",{id:"examples"},"Examples"),Object(d.mdx)("h3",{id:"values"},"Values"),Object(d.mdx)("pre",null,Object(d.mdx)("code",{parentName:"pre",className:"language-javascript"},'var axis = {\n    lowerLimit: new Date(2018, 1, 1, 23).toISOString(),\n    upperLimit: new Date(2018, 1, 3, 1).toISOString(),\n    x: {\n        ticks: {\n            format: "%H",\n            values: [\n                new Date(2018, 1, 2, 6).toISOString(),\n                new Date(2018, 1, 2, 12).toISOString(),\n                new Date(2018, 1, 2, 18).toISOString()\n            ]\n        },\n        show: true\n    },\n    y: {\n        show: true\n    }\n};\n')),Object(d.mdx)("h3",{id:"datetime-buckets"},"Datetime Buckets"),Object(d.mdx)("p",null,Object(d.mdx)("strong",{parentName:"p"},"Note:")," Usage of datetime buckets are very use case specific. One such use case is described below:"),Object(d.mdx)("ul",null,Object(d.mdx)("li",{parentName:"ul"},Object(d.mdx)("inlineCode",{parentName:"li"},"lowerStepTickValues")," represent the time frame for every 6 hours -> ",'["6:00", "12:00", "18:00"]'),Object(d.mdx)("li",{parentName:"ul"},Object(d.mdx)("inlineCode",{parentName:"li"},"upperStepTickValues")," represent the time frame for each day -> ",'["Aug 5th, 00:00", "Aug 6th, 00:00"]'),Object(d.mdx)("li",{parentName:"ul"},Object(d.mdx)("inlineCode",{parentName:"li"},"midpointTickValues")," represent the time frame which are in between -> ",'["3:00", "9:00", "15:00", "21:00"]')),Object(d.mdx)("pre",null,Object(d.mdx)("code",{parentName:"pre",className:"language-javascript"},'var axis = {\n    lowerLimit: new Date(2018, 1, 1, 23).toISOString(),\n    upperLimit: new Date(2018, 1, 3, 1).toISOString(),\n    x: {\n        ticks: {\n            format: "%H",\n            lowerStepTickValues: [\n                new Date(2018, 1, 2, 6).toISOString(),\n                new Date(2018, 1, 2, 12).toISOString(),\n                new Date(2018, 1, 2, 18).toISOString()\n            ],\n            midpointTickValues: [\n                new Date(2018, 1, 2, 3).toISOString(),\n                new Date(2018, 1, 2, 9).toISOString(),\n                new Date(2018, 1, 2, 15).toISOString(),\n                new Date(2018, 1, 2, 21).toISOString()\n            ],\n            upperStepTickValues: [\n                new Date(2018, 1, 2, 0).toISOString(),\n                new Date(2018, 1, 2, 24).toISOString()\n            ]\n        },\n        show: true\n    },\n    y: {\n        show: true\n    }\n};\n')))}c.isMDXComponent=!0}}]);