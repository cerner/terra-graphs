/*
Animations should be fast and nimble, never keeping the user waiting longer than is necessary.
The aim is to prioritize user-perceived performance over technical benchmarks.
Animations should last 150msâ€“250ms and should feel quick and responsive.
Using cubic-bezier with ->
Incoming Velocity: 70%
Outgoing Velocity: 0%
We quickly accelerate at the beginning of the animation and slowly decelerate by the end.
*/

:root {
--default-transition-timing: cubic-bezier(0.07, 0.95, 0, 1);
--default-transition-duration: 1s;
}

@mixin font-smooth() {
    $webkit-font-smoothing: antialiased;
    $moz-osx-font-smoothing: grayscale;
}

@mixin basic-transition($property, $duration, $timing) {
    -moz-transition: $property $duration $timing;
    -webkit-transition: $property $duration $timing;
    -ms-transition: $property $duration $timing;
    -o-transition: $property $duration $timing;
    transition: $property $duration $timing;
}

// prettier-ignore
@mixin transform-transition($property, $duration, $timing) {
    -moz-transition: $property $duration $timing, -moz-transform $duration $timing;
    -webkit-transition: $property $duration $timing, -webkit-transform $duration $timing;
    -ms-transition: $property $duration $timing, -ms-transform $duration $timing;
    -o-transition: $property $duration $timing, -o-transform $duration $timing;
    transition: $property $duration $timing, transform $duration $timing;
}

@mixin opacity-hide() {
    opacity: 0;
    visibility: hidden;
    transform-transition : (
        opacity,
        var(--default-transition-duration),
        var(--default-transition-timing)
    );
}

@mixin opacity-show() {
    opacity: 1;
    visibility: visible;
    transform-transition : (
        opacity,
        var(--default-transition-duration),
        var(--default-transition-timing)
    );
}

@mixin selected-indicator-styles() {
    stroke-width: 1px;
    stroke: var(--blue30);
    fill: var(--blue10);
    fill-opacity: 0.25;
}

/*
User agent gives `geometric precision` more importance than `speed` and `crisp edges`
*/
@mixin carbon-shape-rendering() {
    shape-rendering: auto;
}
