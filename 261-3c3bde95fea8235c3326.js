(window.webpackJsonp=window.webpackJsonp||[]).push([[261],{1581:function(e,n,t){"use strict";var a=t(2);Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=a(t(1287)),i=function(e){return{bindTo:e,axis:{x:{type:r.default.helpers.AXIS_TYPE.TIME_SERIES,label:"Datetime",lowerLimit:new Date(2016,0,1,0).toISOString(),upperLimit:new Date(2016,0,2,0).toISOString(),ticks:{}},y:{label:"Paired Set A",lowerLimit:0,upperLimit:200},y2:{show:!1,label:"Paired Set B",lowerLimit:100,upperLimit:350}},eventline:[{color:r.default.helpers.COLORS.GREY,style:{strokeDashArray:"4,4"},value:new Date(2016,0,1,8).toISOString()}],pan:{enabled:!0},showLabel:!0,showLegend:!0,showVGrid:!0,showHGrid:!0}};n.default=i},1813:function(e,n,t){"use strict";var a=t(2);Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=a(t(43)),i=a(t(0)),l=a(t(78)),o=a(t(1287)),s=a(t(1288));t(1290),t(1303);var p,c=a(t(1292)),d=a(t(1581)),u=a(t(1408)),m=s.default.deepClone((0,d.default)("#PairedResultDynamicEventline")),f=[s.default.deepClone(u.default)],g={initial:0,factor:3},h=function(){i.default.useEffect((function(){p=o.default.api.graph(m),f.forEach((function(e){p.loadContent(o.default.api.pairedResult(e))}))}),[]);var e=i.default.useReducer((function(e,n){var t;switch(n.type){case"panLeft":t=e.initial-e.factor;break;case"panRight":t=e.initial+e.factor;break;default:return e}return{initial:t,factor:e.factor}}),g),n=(0,r.default)(e,2),t=n[0],a=n[1];return i.default.useLayoutEffect((function(){if(p){p.config.axis.x.lowerLimit=new Date(2016,0,1,t.initial).toISOString(),p.config.axis.x.upperLimit=new Date(2016,0,2,t.initial).toISOString();var e=[{color:o.default.helpers.COLORS.BLACK,style:{strokeDashArray:"2,2"},value:new Date(2016,0,1,12).toISOString()}],n={panData:[s.default.deepClone(u.default)],eventline:e};p.reflowMultipleDatasets(n)}}),[t.initial]),i.default.createElement(i.default.Fragment,null,i.default.createElement(l.default,{className:"button-pan-left",text:"<",onClick:function(){return a({type:"panLeft"})}}),i.default.createElement(l.default,{className:"button-pan-right",text:">",onClick:function(){return a({type:"panRight"})}}),i.default.createElement(c.default,{id:"PairedResultDynamicEventline"}))};n.default=h},2049:function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return E}));var a=t(31),r=t.n(a),i=t(56),l=t.n(i),o=t(0),s=t.n(o),p=t(795),c=t(1813),d=t.n(c),u=["components"],m={};function f(e){var n=e.components,t=l()(e,u);return Object(p.mdx)("wrapper",r()({},m,t,{components:n,mdxType:"MDXLayout"}),Object(p.mdx)("pre",null,Object(p.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport Button from 'terra-button/lib/Button';\nimport Carbon from '@cerner/carbon-graphs/lib/js/carbon';\nimport utils from '@cerner/carbon-graphs/lib/js/helpers/utils';\nimport '@cerner/terra-graphs-docs/lib/terra-graphs-src/components/Graph.module.scss';\nimport '@cerner/terra-graphs-docs/lib/terra-graphs-src/components/PairedResult/PairedResultGraph.module.scss';\nimport ExampleGraphContainer from '@cerner/terra-graphs-docs/lib/terra-dev-site/ExampleGraphContainer/ExampleGraphContainer';\nimport getPairedResultTimeseriesPanningConfig from '@cerner/terra-graphs-docs/lib/example-datasets/graphConfigObjects/PairedResult/pairedResultPanningWithEventline';\nimport exampleData from '@cerner/terra-graphs-docs/lib/example-datasets/dataObjects/PairedResult/pairedResultSimplePanningData';\n\n/*\nPlease refer to the documentation below to see the graphConfig and data objects\n*/\nconst graphConfig = utils.deepClone(getPairedResultTimeseriesPanningConfig('#PairedResultDynamicEventline'));\nconst dataset = [utils.deepClone(exampleData)];\n\nconst state = {\n  initial: 0,\n  factor: 3,\n};\nlet graph;\n\nconst PairedResultDynamicEventlinePanningExample = () => {\n  React.useEffect(() => {\n    graph = Carbon.api.graph(graphConfig);\n    dataset.forEach((data) => {\n      graph.loadContent(Carbon.api.pairedResult(data));\n    });\n  }, []);\n\n  const reducer = (panState, action) => {\n    let hour;\n\n    switch (action.type) {\n      case 'panLeft':\n        hour = panState.initial - panState.factor;\n        break;\n      case 'panRight':\n        hour = panState.initial + panState.factor;\n        break;\n      default:\n        return panState;\n    }\n\n    return {\n      initial: hour,\n      factor: panState.factor,\n    };\n  };\n\n  const [panState, dispatch] = React.useReducer(reducer, state);\n\n  React.useLayoutEffect(() => {\n    if (!graph) { return; }\n\n    graph.config.axis.x.lowerLimit = new Date(2016, 0, 1, panState.initial).toISOString();\n    graph.config.axis.x.upperLimit = new Date(2016, 0, 2, panState.initial).toISOString();\n\n    const newEventline = [\n      {\n        color: Carbon.helpers.COLORS.BLACK,\n        style: {\n          strokeDashArray: '2,2',\n        },\n        value: new Date(2016, 0, 1, 12).toISOString(),\n      },\n    ];\n\n    const newDataset = {\n      panData: [utils.deepClone(exampleData)],\n      eventline: newEventline,\n    };\n\n    graph.reflowMultipleDatasets(newDataset);\n  }, [panState.initial]);\n\n  return (\n    <>\n      <Button className=\"button-pan-left\" text=\"<\" onClick={() => dispatch({ type: 'panLeft' })} />\n      <Button className=\"button-pan-right\" text=\">\" onClick={() => dispatch({ type: 'panRight' })} />\n      <ExampleGraphContainer id=\"PairedResultDynamicEventline\" />\n    </>\n  );\n};\n\nexport default PairedResultDynamicEventlinePanningExample;\n\n")))}f.isMDXComponent=!0;var g=t(1295),h=t.n(g),b=t(1296),x=function(e){var n=e.title,t=e.description,a=e.isExpanded;return s.a.createElement(h.a,{title:n||"Dynamic Eventline",description:t,example:s.a.createElement(d.a,null),exampleCssSrc:s.a.createElement(b.a,null),exampleSrc:s.a.createElement(f,null),isExpanded:a})},S=["components"],w={},O="wrapper";function j(e){var n=e.components,t=l()(e,S);return Object(p.mdx)(O,r()({},w,t,{components:n,mdxType:"MDXLayout"}),Object(p.mdx)("pre",null,Object(p.mdx)("code",{parentName:"pre",className:"language-js"},"import Carbon from '@cerner/carbon-graphs/lib/js/carbon';\n\nconst getPairedResultTimeseriesPanningConfig = (id) => ({\n  bindTo: id,\n  axis: {\n    x: {\n      type: Carbon.helpers.AXIS_TYPE.TIME_SERIES,\n      label: 'Datetime',\n      lowerLimit: new Date(2016, 0, 1, 0).toISOString(),\n      upperLimit: new Date(2016, 0, 2, 0).toISOString(),\n      ticks: {},\n    },\n    y: {\n      label: 'Paired Set A',\n      lowerLimit: 0,\n      upperLimit: 200,\n    },\n    y2: {\n      show: false,\n      label: 'Paired Set B',\n      lowerLimit: 100,\n      upperLimit: 350,\n    },\n  },\n  eventline: [\n    {\n      color: Carbon.helpers.COLORS.GREY,\n      style: {\n        strokeDashArray: '4,4',\n      },\n      value: new Date(2016, 0, 1, 8).toISOString(),\n    },\n  ],\n  pan: {\n    enabled: true,\n  },\n  showLabel: true,\n  showLegend: true,\n  showVGrid: true,\n  showHGrid: true,\n});\n\nexport default getPairedResultTimeseriesPanningConfig;\n\n")))}j.isMDXComponent=!0;var y=t(1634),C=["components"];t(1298);var v={},D="wrapper";function E(e){var n=e.components,t=l()(e,C);return Object(p.mdx)(D,r()({},v,t,{components:n,mdxType:"MDXLayout"}),Object(p.mdx)("h1",{id:"paired-result-graph-panning---dynamic-eventline"},"Paired Result graph panning - dynamic eventline"),Object(p.mdx)("p",null,"This is a paired result graph example that implements panning with a dynamic eventline."),Object(p.mdx)("h2",{id:"getting-started"},"Getting Started"),Object(p.mdx)("ul",null,Object(p.mdx)("li",{parentName:"ul"},"Install with ",Object(p.mdx)("a",{parentName:"li",href:"https://www.npmjs.com/"},"npmjs"),":",Object(p.mdx)("ul",{parentName:"li"},Object(p.mdx)("li",{parentName:"ul"},Object(p.mdx)("inlineCode",{parentName:"li"},"npm i @cerner/carbon-graphs --save-dev"))))),Object(p.mdx)("h2",{id:"usage"},"Usage"),Object(p.mdx)("pre",null,Object(p.mdx)("code",{parentName:"pre",className:"language-js"},"import Carbon from '@cerner/carbon-graphs/dist/js/carbon-graphs.js';\nimport '@cerner/carbon-graphs/dist/css/carbon-graphs.css';\n")),Object(p.mdx)("h2",{id:"example"},"Example"),Object(p.mdx)(x,{mdxType:"PairedResultGraphPanning"}),Object(p.mdx)("details",null,Object(p.mdx)("summary",{style:{fontSize:24}},Object(p.mdx)("b",null,"Data")),Object(p.mdx)("h3",{id:"graph-config-object"},"Graph Config object"),Object(p.mdx)(j,{mdxType:"GraphConfig"}),Object(p.mdx)("h3",{id:"data-object"},"Data object"),Object(p.mdx)(y.a,{mdxType:"DataObject"})))}E.isMDXComponent=!0}}]);